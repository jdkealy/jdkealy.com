[{:title "Rendering more interesting stuff"
  :commit "https://github.com/jdkealy/jdkealy.com/commit/4b0a0c8d2ec6f479a1003bbf96e763009b1fdd88"
  :body ["So up to this point, I've had a vector of strings, and I'm breaking the string into paragraph tags, but if i want to set up a blog where I write about writing code, it won't be very useful unless I can render some code... So what to do here?"
         "Thinking I could add to this vector some hashmaps defining their type. So something like"
         "{:type :code, :body '(map (fn[e] do-something) some-vector)}"
         "so let's try this out:"
         {:type :code
          :body
          " function foo(){
}
          "}
         "Cool so that works for Javascript... Let me add another type, :link so I can give credit where it's due."
         {:type :link
          :href "http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html"
          :body "SyntaxHighligher Plugin"}]
  }
 {:title "Associating a POST with a git commit"
  :body ["Singe I'm actually using git to stora all my data including this EDN file-based database. Why not associate each blog post with a git commit? So you could follow along or something.  "
         "Simple enough... Add a git commit attribute to this field. And render it... Only problem is though I'll have to commit twice for each article. Once to push the article / content and get the commit ID, then another to put the git commit ID in the 'DB' here. Using a text-file database just got a little less glamorous. But ok here it goes."
         ]
  :commit "https://github.com/jdkealy/jdkealy.com/commit/dc32a1ea572ae9a15df8a36f63d1bf2028e32bc7"}
 {:title "SETTING UP A CLJS PROJECT ON HEROKU"
  :commit "not found"
  :body ["nothing is quite as easy as setting up a sinatra project on heroku. For this blog, I'm using sinatra for the client-side app and a cljore project to generate an OM/clojurescript application. For my blog, I'm writing in EDN Files."
         "There's a challenge in terms of organizing content... While using paredit in emacs, using EDN is a nice way to store data... But I can't figure out how to do inline markup. <div></div> remain escaped upon render. Futhermore, inline images, etc, etc won't be possible with this method either. Going to have to come up with a better method short of a full-blown WYSIWYG."
         "In any case. This is my blog. Not much to see here."]}]
